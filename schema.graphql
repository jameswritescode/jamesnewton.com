type Attachment implements Node {
  embed: Boolean!
  extension: String!
  filename: String!
  id: ID
  url: String!
}

"""
Autogenerated input type of CreateAttachment
"""
input CreateAttachmentInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  file: Upload!
}

"""
Autogenerated return type of CreateAttachment
"""
type CreateAttachmentPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  success: Boolean!
  url: String
}

"""
Autogenerated input type of Login
"""
input LoginInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  email: String!
  password: String!
}

"""
Autogenerated return type of Login
"""
type LoginPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  success: Boolean!
}

type Meta {
  description: String!
  title: String!
  type: String!
  url: String!
}

type Mutation {
  createAttachment(input: CreateAttachmentInput!): CreateAttachmentPayload!
  login(input: LoginInput!): LoginPayload!
  updateOrCreatePost(input: UpdateOrCreatePostInput!): UpdateOrCreatePostPayload!
}

interface Node {
  id: ID
}

type Post implements Node {
  content: String!
  created: String!
  id: ID
  meta: Meta!
  name: String!
  slug: String!
  state: PostState!
  url: String!
}

enum PostState {
  draft
  published
}

type Query {
  attachments: [Attachment]!
  latestTweet: Tweet!
  me: User
  post(slug: String!): Post
  posts(limit: Int): [Post]!
}

type Tweet {
  content: String!
  created: String!
}

"""
Autogenerated input type of UpdateOrCreatePost
"""
input UpdateOrCreatePostInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  content: String
  id: ID
  name: String
  state: PostState
}

"""
Autogenerated return type of UpdateOrCreatePost
"""
type UpdateOrCreatePostPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  post: Post!
  success: Boolean!
}

scalar Upload

type User implements Node {
  id: ID
}